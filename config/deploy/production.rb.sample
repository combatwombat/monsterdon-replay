# server-based syntax
# ======================
# Defines a single server with a list of roles and multiple properties.
# You can define all roles on a single server, or split them:

server 'domain.com', user: 'user', roles: %w{app}, port: 1313

set :branch, 'main'



# role-based syntax
# ==================

# Defines a role with one or multiple servers. The primary server in each
# group is considered to be the first unless any  hosts have the primary
# property set. Specify the username and a domain or IP for the server.
# Don't use `:all`, it's a meta role.

# role :app, %w{rob@stenobot.gerlach.dev}
# role :web, %w{user1@primary.com user2@additional.com}, other_property: :other_value
# role :db,  %w{deploy@example.com}



# Configuration
# =============
# You can set any configuration variable like in config/deploy.rb
# These variables are then only loaded and set in this stage.
# For available Capistrano configuration variables see the documentation page.
# http://capistranorb.com/documentation/getting-started/configuration/
# Feel free to add new variables to customise your setup.
set :deploy_to, '/var/www/sites/domain.com/site'


# Custom SSH Options
# ==================
# You may pass any option but keep in mind that net/ssh understands a
# limited set of options, consult the Net::SSH documentation.
# http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start
#
# Global options
# --------------

set :ssh_options, {
    keys: %w(/Users/user/.ssh/id_rsa),
    port: 12345
}

SSHKit.config.command_map[:git] = "GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rait -o IdentitiesOnly=yes' git"


#  set :ssh_options, {
#    keys: %w(/home/rlisowski/.ssh/id_rsa),
#    forward_agent: false,
#    auth_methods: %w(password)
#  }
#
# The server-based syntax can be used to override options:
# ------------------------------------
# server 'example.com',
#   user: 'user_name',
#   roles: %w{web app},
#   ssh_options: {
#     user: 'user_name', # overrides user setting above
#     keys: %w(/home/user_name/.ssh/id_rsa),
#     forward_agent: false,
#     auth_methods: %w(publickey password)
#     # password: 'please use keys'
#   }

#namespace :deploy do
#  desc 'Restart transcript_job_runner in Docker container'
#  task :restart_transcript_job_runner do
#    on roles(:app) do
#      execute "docker exec stenobot supervisorctl restart transcript_job_runner"
#    end
#  end
#end

#after 'deploy:finished', 'deploy:restart_transcript_job_runner'

# run chmod +x on worker/worker.php after deploy is finished
after 'deploy:finished', 'deploy:restart_worker'


