function ready(fn){"loading"!=document.readyState?fn():document.addEventListener("DOMContentLoaded",fn)}async function request(url,method="GET",data=[],responseFormat="text",headers={}){"GET"===method&&data.length>0&&(url+="?"+new URLSearchParams(data).toString());let res=await fetch(url,{method:method,headers:{"Content-Type":"application/x-www-form-urlencoded",...headers},body:"GET"!==method?new URLSearchParams(data):void 0});return"json"===responseFormat?await res.json():await res.text()}Element.prototype.on=Element.prototype.addEventListener;const find=document.querySelector.bind(document),findAll=document.querySelectorAll.bind(document);function formatTime(seconds){let hours=Math.floor(seconds/3600),minutes=Math.floor(seconds%3600/60),secs=Math.floor(seconds%60),timeString="";return hours>0&&(timeString+=hours+":"),timeString+=(minutes<10?"0":"")+minutes+":",timeString+=(secs<10?"0":"")+secs,timeString}async function TootPlayer(slug){let toots=await request("/api/toots/"+slug,"GET",[],"json");if(!toots)return;const els={body:find("body"),player:find(".player"),tootsContainer:find(".toots"),currentTime:find(".current-time"),overallTime:find(".overall-time"),playPauseButton:find(".play-pause-button"),inputCurrentTime:find(".input-current-time")},overallCurrentTime=els.inputCurrentTime.getAttribute("max");let currentTime=0,playing=!1,showTimeLeft=!0,startTime=0,startCurrentTime=0,oldCurrentTime=0;function stopPlaying(){playing=!1,els.player.classList.remove("playing")}function advanceTime(timestamp){let elapsedTime=performance.now()/1e3-startTime;currentTime=startCurrentTime+elapsedTime,currentTime>overallCurrentTime&&(currentTime=overallCurrentTime,stopPlaying()),Math.floor(oldCurrentTime)!==Math.floor(currentTime)&&(updateDisplay(),showTootsBeforeTime(currentTime)),oldCurrentTime=currentTime,playing&&requestAnimationFrame(advanceTime)}function showTootsBeforeTime(seconds){toots.forEach((toot=>{toot.time_delta<=seconds?toot.el.style.display="block":toot.el.style.display="none"}))}function updateDisplay(){if(els.currentTime.innerText=formatTime(currentTime),els.inputCurrentTime.value=currentTime,showTimeLeft){const timeLeft=overallCurrentTime-currentTime;els.overallTime.innerText="-"+formatTime(timeLeft)}else els.overallTime.innerText=formatTime(overallCurrentTime)}updateDisplay(),toots.forEach(((toot,index)=>{let tootHTML=`\n        <div class="toot" data-id="${toot.id}" style="display: none;">\n            <div class="toot-header">\n                <a href="${toot.account.url}" target="_blank" class="col col-image">\n                    <img src="/media/avatars/${toot.account.id}.jpg" alt="${toot.account.display_name}" loading="lazy">\n                </a>\n                <a href="${toot.account.url}" target="_blank" class="col col-name">\n                    <div class="display-name">${toot.account.display_name}</div>\n                    <div class="acct">${toot.account.acct}</div>\n                </a>\n                <div class="col col-created_at">\n                    ${formatTime(toot.time_delta)}\n                </div>\n            </div>\n            <div class="toot-body">\n                ${toot.content}\n            </div>\n        </div>\n        `,tootElement=document.createElement("div");tootElement.innerHTML=tootHTML.trim(),tootElement=tootElement.firstChild,toots[index].el=tootElement,els.tootsContainer.append(tootElement)})),els.body.classList.add("toots-loaded"),els.inputCurrentTime.on("input",(e=>{var seconds;seconds=parseInt(e.target.value),startTime=performance.now()/1e3,currentTime=seconds,startCurrentTime=currentTime,updateDisplay(),showTootsBeforeTime(seconds)})),els.playPauseButton.on("click",(e=>{e.preventDefault(),playing?stopPlaying():(playing=!0,els.player.classList.add("playing"),startTime=performance.now()/1e3,startCurrentTime=currentTime,oldCurrentTime=currentTime,advanceTime())})),els.overallTime.on("click",(e=>{showTimeLeft=!showTimeLeft,updateDisplay()}))}Element.prototype.find=Element.prototype.querySelector,Element.prototype.findAll=Element.prototype.querySelectorAll,Element.prototype.show=function(){this.style.display=this.dataset._display||"block"},Element.prototype.hide=function(){this.dataset._display=window.getComputedStyle(this,null).display,this.style.display="none"},ready((()=>{if(find(".page-movie")){const movieInfo=find(".movie .info"),openMovieInfo=find(".movie-info"),closeMovieInfo=movieInfo.find(".close");openMovieInfo.on("click",(e=>{e.preventDefault(),movieInfo.show(),openMovieInfo.hide()})),closeMovieInfo.on("click",(e=>{e.preventDefault(),movieInfo.hide(),openMovieInfo.show()}))}}));