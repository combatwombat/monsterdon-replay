class XTimeline extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: block;\n          width: 100%;\n          height: 60px;\n          position: relative;\n        }\n        #touch-area {\n          width: 100%;\n          height: 100%;\n          position: relative;\n          cursor: pointer;\n        }\n        #track-container {\n          position: absolute;\n          left: 0;\n          right: 0;\n          top: 50%;\n          transform: translateY(-50%);\n          height: 3px;\n        }\n        #track {\n          width: 100%;\n          height: 100%;\n          background-color: #444;\n          position: relative;\n          border-radius: 3px;\n        }\n        #filled-track {\n          height: 100%;\n          background-color: #eee;\n          position: absolute;\n          left: 0;\n          top: 0;\n          border-radius: 3px;\n        }\n        #handle {\n          width: 12px;\n          height: 12px;\n          background-color: #eee;\n          border-radius: 6px;\n          position: absolute;\n          top: 50%;\n          transform: translate(-50%, -50%);\n          pointer-events: none;\n        }\n      </style>\n      <div id="touch-area" part="touch-area">\n        <div id="track-container" part="track-container">\n          <div id="track" part="track">\n            <div id="filled-track" part="filled-track"></div>\n          </div>\n        </div>\n        <div id="handle" part="handle"></div>\n      </div>\n    ',this.touchArea=this.shadowRoot.getElementById("touch-area"),this.track=this.shadowRoot.getElementById("track"),this.filledTrack=this.shadowRoot.getElementById("filled-track"),this.handle=this.shadowRoot.getElementById("handle"),this.isActive=!1,this.onMove=this.onMove.bind(this),this.onEnd=this.onEnd.bind(this),this.touchArea.addEventListener("mousedown",this.onStart.bind(this)),this.touchArea.addEventListener("touchstart",this.onStart.bind(this))}static get observedAttributes(){return["value","min","max","step"]}connectedCallback(){this.updateValue()}attributeChangedCallback(name,oldValue,newValue){oldValue!==newValue&&this.updateValue()}get value(){return parseFloat(this.getAttribute("value"))||0}set value(val){this.setAttribute("value",val)}get min(){return parseFloat(this.getAttribute("min"))||0}get max(){return parseFloat(this.getAttribute("max"))||100}get step(){return parseFloat(this.getAttribute("step"))||1}updateValue(){const percentage=(this.value-this.min)/(this.max-this.min)*100;this.filledTrack.style.width=`${percentage}%`,this.handle.style.left=`${percentage}%`}onStart(event){event.preventDefault(),this.isActive=!0,document.addEventListener("mousemove",this.onMove),document.addEventListener("touchmove",this.onMove),document.addEventListener("mouseup",this.onEnd),document.addEventListener("touchend",this.onEnd),this.onMove(event)}onMove(event){if(!this.isActive)return;const rect=this.touchArea.getBoundingClientRect(),x=(event.clientX||event.touches[0].clientX)-rect.left,percentage=Math.max(0,Math.min(1,x/rect.width)),newValue=this.min+percentage*(this.max-this.min),steppedValue=Math.round(newValue/this.step)*this.step;steppedValue!==this.value&&(this.value=steppedValue,this.updateValue(),this.dispatchEvent(new Event("input",{bubbles:!0})))}onEnd(){this.isActive=!1,document.removeEventListener("mousemove",this.onMove),document.removeEventListener("touchmove",this.onMove),document.removeEventListener("mouseup",this.onEnd),document.removeEventListener("touchend",this.onEnd)}}function ready(fn){"loading"!=document.readyState?fn():document.addEventListener("DOMContentLoaded",fn)}async function request(url,method="GET",data=[],responseFormat="text",headers={}){"GET"===method&&data.length>0&&(url+="?"+new URLSearchParams(data).toString());let res=await fetch(url,{method:method,headers:{"Content-Type":"application/x-www-form-urlencoded",...headers},body:"GET"!==method?new URLSearchParams(data):void 0});return"json"===responseFormat?await res.json():await res.text()}function delegate(eventType,selector,handler){document.addEventListener(eventType,(function(event){const targets=document.querySelectorAll(selector),target=event.target;for(let i=0;i<targets.length;i++){let el=target;for(;el&&el!==this;){if(el===targets[i])return void handler.call(el,event);el=el.parentNode}}}),!0)}function formatTime(seconds){let hours=Math.floor(seconds/3600),minutes=Math.floor(seconds%3600/60),secs=Math.floor(seconds%60),timeString="";return hours>0&&(timeString+=hours+":"),timeString+=(minutes<10?"0":"")+minutes+":",timeString+=(secs<10?"0":"")+secs,timeString}async function TootPlayer(slug){let toots=await request("/api/toots/"+slug,"GET",[],"json");if(!toots)return;const els={body:find("body"),player:find(".player"),tootsContainer:find(".toots"),currentTime:find(".current-time"),overallTime:find(".overall-time"),playPauseButton:find(".play-pause-button"),inputCurrentTime:find(".input-current-time"),openSettings:find(".open-settings"),inputSettingCompact:find("#setting-compact"),inputSettingHideHashtags:find("#setting-hide-hashtags"),tootsStartButton:find(".toots-start-button")},overallCurrentTime=els.inputCurrentTime.getAttribute("max");let currentTime=0,playing=!1,showTimeLeft=!0,startTime=0,startCurrentTime=0,oldCurrentTime=-1;function startPlaying(){playing=!0,els.player.classList.add("playing"),startTime=Date.now()/1e3,startCurrentTime=currentTime,oldCurrentTime=currentTime-1,advanceTime()}function stopPlaying(){playing=!1,els.player.classList.remove("playing")}function advanceTime(timestamp){let elapsedTime=Date.now()/1e3-startTime;currentTime=startCurrentTime+elapsedTime,currentTime>overallCurrentTime&&(currentTime=overallCurrentTime,stopPlaying()),Math.floor(oldCurrentTime)!==Math.floor(currentTime)&&(updateDisplay(),showTootsBeforeTime(currentTime)),oldCurrentTime=currentTime,playing&&requestAnimationFrame(advanceTime)}function showTootsBeforeTime(seconds){toots.forEach((toot=>{toot.time_delta<=seconds?toot.el.style.display="block":toot.el.style.display="none"}))}function updateDisplay(){if(els.currentTime.innerText=formatTime(currentTime),els.inputCurrentTime.value=currentTime,showTimeLeft){const timeLeft=overallCurrentTime-currentTime;els.overallTime.innerText="-"+formatTime(timeLeft)}else els.overallTime.innerText=formatTime(overallCurrentTime)}updateDisplay();let tootsWrapper=document.createElement("div");toots.forEach(((toot,index)=>{let tootHTML=`<div class="toot" style="display: none;" data-id="${toot.id}">\n            <a href="${toot.url}" target="_blank" class="toot-header">\n                <div class="col col-image">\n                    <img src="/media/avatars/${toot.account.id}.jpg" alt="${toot.account.display_name}" loading="lazy">\n                </div>\n                <div class="col col-name">\n                    <div class="display-name">${toot.account.display_name}</div>\n                    <div class="acct">${toot.account.acct}</div>\n                </div>\n                <div class="col col-created_at">\n                    ${formatTime(toot.time_delta)}\n                </div>\n            </a>\n            <div class="toot-body">\n                ${toot.content}\n            </div>`;toot.media_attachments.length>0&&(tootHTML+='<div class="toot-media-attachments">',toot.media_attachments.forEach((media=>{"image"===media.type?tootHTML+=`<div class="media media-image"><a href="/media/originals/${media.id}.${media.extension}" target="_blank"><img src="/media/previews/${media.id}.jpg" alt="${media.description}" loading="lazy"></a></div>`:"video"===media.type?tootHTML+=`<div class="media media-video"><video controls>\n                        <source src="/media/originals/${media.id}.${media.extension}" type="video/mp4">\n                        Your browser does not support the video tag.\n                    </video></div>`:"gifv"===media.type?tootHTML+=`<div class="media media-gifv">\n                        <video autoplay loop muted playsinline>\n                            <source src="/media/originals/${media.id}.${media.extension}" type="video/mp4">\n                            Your browser does not support the video tag.\n                        </video>\n                    </div>`:tootHTML+=`<div class="media media-misc">\n                        <div style="height: 400px; background: red;">${media.type}</div>\n                    </div>`})),tootHTML+="</div>"),tootHTML+="</div>";let tootElement=document.createElement("div");tootElement.innerHTML=tootHTML.trim(),tootElement=tootElement.firstChild,toots[index].el=tootElement,tootsWrapper.append(tootElement)})),els.tootsContainer.append(tootsWrapper),els.body.classList.add("toots-loaded"),els.inputCurrentTime.on("input",(e=>{var seconds;seconds=parseInt(e.target.value),startTime=Date.now()/1e3,currentTime=seconds,startCurrentTime=currentTime,updateDisplay(),showTootsBeforeTime(seconds),els.body.classList.add("playing-started")})),els.playPauseButton.on("click",(e=>{e.preventDefault(),playing?stopPlaying():(startPlaying(),els.body.classList.add("playing-started"))})),els.overallTime.on("click",(e=>{showTimeLeft=!showTimeLeft,updateDisplay()})),els.openSettings.on("click",(e=>{e.preventDefault(),els.player.classList.toggle("settings-open")})),document.on("click",(e=>{els.player.contains(e.target)||els.player.classList.contains("settings-open")&&(els.player.classList.remove("settings-open"),e.preventDefault())})),on("click",".settings .col-label",(e=>{e.target.parentElement.find(".col-checkbox input").click()})),els.inputSettingCompact.on("change",(e=>{e.target.checked?els.body.classList.add("style-compact"):els.body.classList.remove("style-compact")})),els.inputSettingHideHashtags.on("change",(e=>{e.target.checked?els.body.classList.add("style-hide-hashtags"):els.body.classList.remove("style-hide-hashtags")})),els.tootsStartButton.on("click",(e=>{e.preventDefault(),els.body.classList.add("playing-started"),startPlaying()}))}customElements.define("x-timeline",XTimeline),globalThis.find=document.querySelector.bind(document),globalThis.findAll=document.querySelectorAll.bind(document),Element.prototype.find=Element.prototype.querySelector,Element.prototype.findAll=Element.prototype.querySelectorAll,Element.prototype.on=Element.prototype.addEventListener,document.on=document.addEventListener,globalThis.on=delegate,Element.prototype.show=function(){this.style.display=this.dataset._display||"block"},Element.prototype.hide=function(){this.dataset._display=window.getComputedStyle(this,null).display,this.style.display="none"},ready((()=>{if(find(".page-movie")){const body=find("body");find("header");find(".open-movie-info").on("click",(e=>{e.preventDefault(),body.classList.toggle("movie-info-closed")})),find(".movie-info .close").on("click",(e=>{e.preventDefault(),body.classList.add("movie-info-closed")}))}}));